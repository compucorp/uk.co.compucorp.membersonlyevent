<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2017                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 *
 * Generated from xml/schema/CRM/MembersOnlyEvent/MembersOnlyEvent.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:b9fe1c7752ea5bc3c0dfb55484ea6f22)
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
/**
 * CRM_MembersOnlyEvent_DAO_MembersOnlyEvent constructor.
 */
class CRM_MembersOnlyEvent_DAO_MembersOnlyEvent extends CRM_Core_DAO {
  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'membersonlyevent';
  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var boolean
   */
  static $_log = true;
  /**
   *
   * @var int unsigned
   */
  public $id;
  /**
   * Foreign key for the Event
   *
   * @var int unsigned
   */
  public $event_id;
  /**
   * Should we provide membership purchase button when access to event denied ?
   *
   * @var boolean
   */
  public $purchase_membership_button;
  /**
   * Notice message to show to the user when the access to members-only event denied.
   *
   * @var text
   */
  public $notice_for_access_denied;
  /**
   * Purchase membership button label if it is enabled
   *
   * @var string
   */
  public $purchase_membership_button_label;
  /**
   * 0: contribution page, 1: custom URL
   *
   * @var int
   */
  public $purchase_membership_link_type;
  /**
   * Foreign key for the Contribution page
   *
   * @var int unsigned
   */
  public $contribution_page_id;
  /**
   * Purchase membership page URL
   *
   * @var string
   */
  public $purchase_membership_url;
  /**
   * Class constructor.
   */
  function __construct() {
    $this->__table = 'membersonlyevent';
    parent::__construct();
  }
  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static ::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName() , 'event_id', 'civicrm_event', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName() , 'contribution_page_id', 'civicrm_contribution_page', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'required' => true,
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
        ) ,
        'event_id' => array(
          'name' => 'event_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Foreign key for the Event',
          'required' => true,
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
          'FKClassName' => 'CRM_Event_DAO_Event',
        ) ,
        'purchase_membership_button' => array(
          'name' => 'purchase_membership_button',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Purchase membership button') ,
          'description' => 'Should we provide membership purchase button when access to event denied ?',
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
        ) ,
        'notice_for_access_denied' => array(
          'name' => 'notice_for_access_denied',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Notice for access denied') ,
          'description' => 'Notice message to show to the user when the access to members-only event denied.',
          'rows' => 4,
          'cols' => 80,
          'default' => 'NULL',
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
          'html' => array(
            'type' => 'TextArea',
          ) ,
        ) ,
        'purchase_membership_button_label' => array(
          'name' => 'purchase_membership_button_label',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Purchase membership button label') ,
          'description' => 'Purchase membership button label if it is enabled',
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'default' => 'NULL',
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
        ) ,
        'purchase_membership_link_type' => array(
          'name' => 'purchase_membership_link_type',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Purchase membership link type') ,
          'description' => '0: contribution page, 1: custom URL',
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
        ) ,
        'contribution_page_id' => array(
          'name' => 'contribution_page_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Foreign key for the Contribution page',
          'default' => 'NULL',
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contribute_DAO_ContributionPage',
        ) ,
        'purchase_membership_url' => array(
          'name' => 'purchase_membership_url',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Purchase membership page URL') ,
          'description' => 'Purchase membership page URL',
          'maxlength' => 3000,
          'size' => CRM_Utils_Type::HUGE,
          'default' => 'NULL',
          'table_name' => 'membersonlyevent',
          'entity' => 'MembersOnlyEvent',
          'bao' => 'CRM_MembersOnlyEvent_DAO_MembersOnlyEvent',
          'localizable' => 0,
        ) ,
      );
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }
  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName() {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog() {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'nlyevent', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'nlyevent', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of indices
   */
  public static function indices($localize = TRUE) {
    $indices = array();
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }
}
